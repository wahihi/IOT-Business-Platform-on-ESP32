name: ESP32 Complete Automation
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
env:
  ESP_DEVICE_PORT: "/dev/ttyUSB0"
  ESP_MONITOR_PORT: "/dev/ttyUSB0"
  FIRMWARE_PATH: "examples/CI-CD-Pipeline-TEST/hello_world/build/hello_world.bin"

jobs:
  build:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
          
    - name: Build firmware
      run: |
        . /opt/esp/entrypoint.sh
        cd examples/CI-CD-Pipeline-TEST/hello_world
        idf.py fullclean
        idf.py set-target esp32       
        idf.py build
       
    - name: Upload firmware artifact
      uses: actions/upload-artifact@v3
      with:
        name: firmware
        path: ${{ github.workspace }}/examples/CI-CD-Pipeline-TEST/hello_world/build/*.bin
        retention-days: 5

  deploy-and-test:
    needs: build
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
     
    - name: Download firmware artifact
      uses: actions/download-artifact@v3
      with:
        name: firmware
        path: examples/CI-CD-Pipeline-TEST/hello_world/build
        
    - name: Debug info
      run: |
        dmesg | grep -i ttyUSB
        ls -l /dev/ttyUSB0
        idf.py monitor -p ${ESP_MONITOR_PORT} --print-filter "debug" || true
        
    - name: Flash firmware
      run: |
        gpio -g write 0 0  # GPIO0 LOW for boot mode
        sleep 1
        idf.py -p ${ESP_DEVICE_PORT} flash
        gpio -g write 0 1  # GPIO0 HIGH for normal mode
       
    - name: Wait for ESP32 boot
      run: sleep 10
       
    - name: Monitor and capture logs
      run: |
        cd examples/CI-CD-Pipeline-TEST/hello_world
        timeout 120s idf.py monitor -p ${ESP_MONITOR_PORT} > esp32_logs.txt 2>&1 || true
       
    - name: Check for expected output
      id: test_result
      run: |
        if grep -q "Test Passed" esp32_logs.txt; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=Tests passed successfully" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=Tests failed or incomplete" >> $GITHUB_OUTPUT
        fi
       
    - name: Upload test logs
      uses: actions/upload-artifact@v3
      with:
        name: test-logs
        path: esp32_logs.txt

    - name: Create GitHub Issue for test results
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const logs = fs.readFileSync('esp32_logs.txt', 'utf8');
          const status = '${{ steps.test_result.outputs.status }}';
          const message = '${{ steps.test_result.outputs.message }}';
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Test Results: ${status === 'success' ? 'PASSED' : 'FAILED'} - ${context.sha.substring(0, 7)}`,
            body: `
            Commit: ${context.sha}
            Status: ${status}
            Message: ${message}
            
            <details>
            <summary>Test Logs</summary>
            
            \`\`\`
            ${logs}
            \`\`\`
            </details>
            `
          });

    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,workflow
        text: 'ESP32 Test Results - ${{ steps.test_result.outputs.status }}\nMessage: ${{ steps.test_result.outputs.message }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
